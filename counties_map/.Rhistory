n.full = nrow(X.full.zip)
training.prop = 0.8
Random.order = sample(1:n.full, n.full)
training.set = Random.order[1:ceiling(training.prop*n.full)]
training.value = X.full.zip[training.set,]
training.label = Y.full.zip[training.set]
test.set = Random.order[(ceiling(training.prop*n.full)+1):n.full]
test.value = X.full.zip[test.set,]
test.label = Y.full.zip[test.set]
## Solution goes here ---------
num = c(1,3,5,7,9,11)
result = NULL
for(i in 1:length(num)){
test.result = apply(test.value, 1, function(x) KNN.decision2(x, training.value, training.label, K = num[i]))
result[i] = mean(test.result == test.label)
}
plot(num, result, pch = 20, cex = 1.5, col = "blue", ylab = 'Correct rate', xlab = 'Number of neighbors')
title(main = 'Test Correct Rate')
lines(num, result, pch = 20, cex = 1.5, col = "blue")
plot(num, 1-result, pch = 20, cex = 1.5, col = "red", ylab = 'Error rate', xlab = 'Number of neighbors')
title(main = 'Test Error Rate')
lines(num, 1-result, pch = 20, cex = 1.5, col = "red")
for(i in 1:length(num)){
training.result = apply(training.value, 1, function(x) KNN.decision2(x, training.value, training.label, K = num[i]))
result[i] = mean(training.result == training.label)
}
plot(num, result, pch = 20, cex = 1.5, col = "blue", ylab = 'Correct rate', xlab = 'Number of neighbors')
title(main = 'Training Correct Rate')
lines(num, result, pch = 20, cex = 1.5, col = "blue")
plot(num, 1-result, pch = 20, cex = 1.5, col = "red", ylab = 'Error rate', xlab = 'Number of neighbors')
title(main = 'Training Error Rate')
lines(num, 1-result, pch = 20, cex = 1.5, col = "red")
### all images corresponding to digit "3"
zip.3 <- read.table("zip3.txt", header=FALSE, sep=",")
### all images corresponding to digit "3"
zip.3 <- read.table("zip3.txt", header=FALSE, sep=",")
### all images corresponding to digit "3"
zip.3 <- read.table("zip3.txt", header=FALSE, sep=",")
zip.3 <- as.matrix(zip.3)
### all images corresponding to digit "5"
zip.5 <- read.table("zip5.txt", header=FALSE, sep=",")
zip.5 <- as.matrix(zip.5)
### n.3 and n.5 are the total number of "3"s and "5"s, respectively.
n.3 <- length(zip.3[,1])
n.5 <- length(zip.5[,1])
### combine two data sets together
X.full.zip <-rbind(zip.3,zip.5)
dim(X.full.zip)
### define response (labels)
Y.full.zip <- c(rep("Three",n.3),rep("Five",n.5))
length(Y.full.zip)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data = read.table('C:/Users/80921/OneDrive/桌面/course/5221 Time Series Analysis/data/deaths.txt')
data = c(data)$V1
t = 1:length(data)
plot(t, data, pch = 20, cex = 1.5, col = "blue")
lines(t, data, pch = 20, cex = 1.5, col = "blue")
acf(data, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
cos.1 = cos(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.1 = sin(lambda.1*t)
sin.2 = sin(lambda.2*t)
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
cos.1 = cos(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.1 = sin(lambda.1*t)
sin.2 = sin(lambda.2*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1  + sin.1 +t + t2)
summary(model1)
model1 = lm(data ~ 1 + cos.1  + sin.1 + cos.2 + sin.2 +t + t2)
summary(model1)
model1 = lm(data ~ -1 + cos.1  + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
model1 = lm(data ~ 1 + cos.1  + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
model1 = lm(data ~ 1 + t + t2)
summary(model1)
model1 = lm(data ~ 1 + cos.1  + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
model1 = lm(data ~ 1 + cos.1  + sin.1 + cos.2 + sin.2 )
summary(model1)
model1 = lm(data ~ -1 + cos.1  + sin.1 + cos.2 + sin.2 )
summary(model1)
model1 = lm(data ~ 1 + cos.1  + sin.1 + cos.2 + sin.2 )
summary(model1)
model1 = lm(data ~ 1 + cos.1 + cos.2)
summary(model1)
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1
model1$coefficients[2]
cos.1
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
model1 = lm(data ~ 1 + cos.1 + cos.2 + t + t^2)
summary(model1)
model1 = lm(data ~ 1 + cos.1 + cos.2 + t + t2)
summary(model1)
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*t - model1$coefficients[5]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
model1$coefficients[2]
data
data2
model1$coefficients[3]
model1 = lm(data ~ 1 + cos.1 + sin.1 + t + t2)
summary(model1)
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*t - model1$coefficients[5]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
model1 = lm(data ~ 1 + cos.1 + sin.1 + t + t2)
summary(model1)
data2 = data - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*t - model1$coefficients[5]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
abline(h = 0)
data2 = data - model1$coefficients[1] - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*t - model1$coefficients[5]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
model2 = lm(data ~ 1 + cos.1 + sin.1)
summary(model2)
data3 = data2 - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1
model3 = lm(data ~ 1 + t + t2)
summary(model3)
data4 = data3 - model1$coefficients[1] - model1$coefficients[2]*t - model1$coefficients[3]*t^2
plot(t, data4, pch = 20, cex = 1.5, col = "blue")
lines(t, data4, pch = 20, cex = 1.5, col = "blue")
data3
model1$coefficients[1] - model1$coefficients[2]*t - model1$coefficients[3]*t^2
data3 = data2 - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1
model3 = lm(data ~ 1 + t + t2)
summary(model3)
data4 = data3 - model1$coefficients[1] - model1$coefficients[2]*t - model1$coefficients[3]*t^2
data4
data3 = data2 - model2$coefficients[2]*cos.1 - model2$coefficients[3]*sin.1
model3 = lm(data ~ 1 + t + t2)
summary(model3)
model2 = lm(data ~ 1 + cos.1 + sin.1)
summary(model2)
data3 = data2 - model2$coefficients[2]*cos.1 - model2$coefficients[3]*sin.1
model3 = lm(data ~ 1 + t + t2)
summary(model3)
data4 = data3 - model3$coefficients[1] - model3$coefficients[2]*t - model3$coefficients[3]*t^2
plot(t, data4, pch = 20, cex = 1.5, col = "blue")
lines(t, data4, pch = 20, cex = 1.5, col = "blue")
model2 = lm(data ~ 1 + cos.1 + sin.1)
summary(model2)
data3 = data - model2$coefficients[2]*cos.1 - model2$coefficients[3]*sin.1
plot(t, data3, pch = 20, cex = 1.5, col = "blue")
lines(t, data3, pch = 20, cex = 1.5, col = "blue")
plot(t, data3, pch = 20, cex = 1.5, col = "blue")
lines(t, data3, pch = 20, cex = 1.5, col = "blue")
model3 = lm(data ~ 1 + t + t2)
summary(model3)
data4 = data3 - model3$coefficients[1] - model3$coefficients[2]*t - model3$coefficients[3]*t^2
plot(t, data4, pch = 20, cex = 1.5, col = "blue")
lines(t, data4, pch = 20, cex = 1.5, col = "blue")
model1 = lm(data ~ 1 + t + t2)
summary(model1)
model1 = lm(data ~ 1 + cos.1 + sin.1 + t + t2)
summary(model1)
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
lambda.1 = 2*pi/12
lambda.2 = 2*pi/3
cos.1 = cos(lambda.1*t)
sin.1 = sin(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.2 = sin(lambda.2*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1 + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
cos.1 = cos(lambda.1*t)
sin.1 = sin(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.2 = sin(lambda.2*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1 + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
lambda.3 = 2*pi/3
cos.1 = cos(lambda.1*t)
sin.1 = sin(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.2 = sin(lambda.2*t)
cos.3 = cos(lambda.3*t)
sin.3 = sin(lambda.3*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1 + sin.1 + cos.2 + sin.2 + cos.3 + sin.3 + t + t2)
summary(model1)
data2 = data - model1$coefficients[1] - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*cos.2 - model1$coefficients[5]*sin.2 - model1$coefficients[6]*cos.3 - model1$coefficients[7]*sin.3 - model1$coefficients[8]*t - model1$coefficients[9]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
data2 = data - model1$coefficients[1] - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*cos.2 - model1$coefficients[5]*sin.2 -  model1$coefficients[8]*t - model1$coefficients[9]*t^2
data2 = data - model1$coefficients[1] - model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 - model1$coefficients[4]*cos.2 - model1$coefficients[5]*sin.2 -  model1$coefficients[8]*t - model1$coefficients[9]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue")
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
pacf(data, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
?pacf
pacf(data, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
acf(data, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "Sample ACF")
pacf(data, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample PACF", ylim = c(-0.5,1), main = "Sample PACF")
acf(data, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
pacf(data, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample PACF", ylim = c(-0.5,1), main = "")
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
pacf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
pacf(data2, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample ACF", ylim = c(-0.5,1), main = "")
pacf(data2, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample PACF of Residuals", ylim = c(-0.5,1), main = "")
plot(t, data, pch = 20, cex = 1.5, col = "blue")
lines(t, data, pch = 20, cex = 1.5, col = "blue")
title("Data")
iid.test(data2)
??iid.test
library(tidyverse)
library(tseries)
data = read.table('C:/Users/80921/OneDrive/桌面/course/5221 Time Series Analysis/data/deaths.txt')
data = c(data)$V1
t = 1:length(data)
bds.test(data2)
x <- rnorm(100)
bds.test(x)
data2
x <- c(rnorm(50), runif(50))
bds.test(x)
x <- quadmap(xi = 0.2, a = 4.0, n = 100)
bds.test(x)
bds.test(data)
bds.test(data2, m = 10)
quadmap(xi = 0.2, a = 4.0, n = 100)
?bds.test
x <- rnorm(100)
bds.test(x)
x <- rnorm(100, 20,1)
bds.test(x)
x <- c(rnorm(50, 50,1), runif(50))
bds.test(x)
x <- c(rnorm(50), runif(50))
bds.test(x)
x <- c(rnorm(50, 10000,1), runif(50))
bds.test(x)
x <- quadmap(xi = 0.2, a = 4.0, n = 100)
bds.test(x)
x <- quadmap(xi = 0.2, a = 4.0, n = 1000)
bds.test(x)
data2
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tseries)
data = read.table('C:/Users/80921/OneDrive/桌面/course/5221 Time Series Analysis/data/deaths.txt')
data = c(data)$V1
t = 1:length(data)
plot(t, data, pch = 20, cex = 1.5, col = "blue",
xlab = 'Time lag', ylab = 'Value')
lines(t, data, pch = 20, cex = 1.5, col = "blue")
title("Data")
plot(t, data, pch = 20, cex = 1.5, col = "blue",
xlab = 'Time lag', ylab = 'Value')
lines(t, data, pch = 20, cex = 1.5, col = "blue")
title("Data")
acf(data, lag.max = 72, type = "correlation",
plot = TRUE, xlab = "Time lag", ylab = "Sample ACF",
ylim = c(-0.5,1), main = "")
pacf(data, lag.max = 72, plot = TRUE,
xlab = "time lag", ylab = "Sample PACF",
ylim = c(-0.5,1), main = "")
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
lambda.3 = 2*pi/3
cos.1 = cos(lambda.1*t)
sin.1 = sin(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.2 = sin(lambda.2*t)
cos.3 = cos(lambda.3*t)
sin.3 = sin(lambda.3*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1 + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
data2 = data - model1$coefficients[1] -
model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 -
model1$coefficients[4]*cos.2 - model1$coefficients[5]*sin.2 -
model1$coefficients[8]*t - model1$coefficients[9]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue",
xlab = 'Time lag', ylab = 'Value')
data2
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
lambda.3 = 2*pi/3
cos.1 = cos(lambda.1*t)
sin.1 = sin(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.2 = sin(lambda.2*t)
cos.3 = cos(lambda.3*t)
sin.3 = sin(lambda.3*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1 + sin.1 + cos.2 + sin.2 + cos.3 + sin.3 + t + t2)
summary(model1)
data2 = data - model1$coefficients[1] -
model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 -
model1$coefficients[4]*cos.2 - model1$coefficients[5]*sin.2 -
model1$coefficients[6]*cos.3 - model1$coefficients[7]*sin.3 -
model1$coefficients[8]*t - model1$coefficients[9]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue",
xlab = 'Time lag', ylab = 'Value')
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
title("Residuals")
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF of Residuals", ylim = c(-0.5,1), main = "")
pacf(data2, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample PACF of Residuals", ylim = c(-0.5,1), main = "")
bds.test(data2)
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF of Residuals", ylim = c(-1,1), main = "")
lambda.1 = 2*pi/12
lambda.2 = 2*pi/6
cos.1 = cos(lambda.1*t)
sin.1 = sin(lambda.1*t)
cos.2 = cos(lambda.2*t)
sin.2 = sin(lambda.2*t)
t2 = t^2
model1 = lm(data ~ 1 + cos.1 + sin.1 + cos.2 + sin.2 + t + t2)
summary(model1)
data2 = data - model1$coefficients[1] -
model1$coefficients[2]*cos.1 - model1$coefficients[3]*sin.1 -
model1$coefficients[4]*cos.2 - model1$coefficients[5]*sin.2 -
model1$coefficients[6]*t - model1$coefficients[7]*t^2
plot(t, data2, pch = 20, cex = 1.5, col = "blue",
xlab = 'Time lag', ylab = 'Value')
lines(t, data2, pch = 20, cex = 1.5, col = "blue")
title("Residuals")
acf(data2, lag.max = 72, type = "correlation", plot = TRUE, xlab = "time lag", ylab = "Sample ACF of Residuals", ylim = c(-0.5,1), main = "")
pacf(data2, lag.max = 72, plot = TRUE, xlab = "time lag", ylab = "Sample PACF of Residuals", ylim = c(-0.5,1), main = "")
bds.test(data2)
library(shiny)
library(shinydashboard)
library(tidyverse)
install.packages('digest')
install.packages('digest',INSTALL_opts = '--no-lock')
library(shiny)
library(devtools)
install_github('Lchiffon/REmap')
library(REmap)
remapH(data,
maptype = 'china',
theme = get_theme("Dark"),
blurSize = 30,
color = c('blue'),
minAlpha = 0.05,
opacity = 1,
)
?remapH
map_data()
map_data
?map_data
county
country_list
library(map)
library(maps)
countyMapEnv
?countyMapEnv
map('county', 'iowa', fill = TRUE, col = palette())
palette()
map('county', 'iowa', fill = TRUE, col = 1:10)
map('county', 'iowa', fill = TRUE, col = 1:50)
county.fips
library(maptools)
latlong2county <- function(pointsDF) {
# Prepare SpatialPolygons object with one SpatialPolygon
# per county
counties <- map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names,":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
countyNames[indices]
}
# Test the function using points in Wisconsin and Oregon.
testPoints <- data.frame(x = c(-90, -120), y = c(44, 44))
testPoints
map('county', fill=TRUE, col="transparent", plot=FALSE)
counties <- map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names,":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
countyNames[indices]
latlong2county(testPoints)
testPoints
pointsDF = c(-90,44)
IDs <- sapply(strsplit(counties$names,":"), function(x) x[1])
IDs
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
counties_sp
head(counties_sp)
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=WGS84"))
pointsDF = data.frame(x = c(-90), y = c(44))
pointsSP <- SpatialPoints(pointsDF,
proj4string=CRS("+proj=longlat +datum=WGS84"))
pointsSP
indices <- over(pointsSP, counties_sp)
indices
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
countyNames[indices]
countyNames
map(database = 'county')
install.packages(usmap)
install.packages('usmap')
library(usmap)
library(ggplot2)
plot_usmap(regions = "counties") +
labs(title = "US Counties",
subtitle = "This is a blank map of the counties of the United States.") +
theme(panel.background = element_rect(color = "black", fill = "lightblue"))
library(usmap)
library(ggplot2)
plot_usmap(include = c("CA", "ID", "NV", "OR", "WA")) +
labs(title = "Western US States",
subtitle = "These are the states in the Pacific Timezone.")
library(usmap)
library(ggplot2)
plot_usmap(region = 'counties' include = c("CA", "ID", "NV", "OR", "WA")) +
labs(title = "Western US States",
subtitle = "These are the states in the Pacific Timezone.")
library(usmap)
library(ggplot2)
plot_usmap(region = 'counties', include = c("CA", "ID", "NV", "OR", "WA")) +
labs(title = "Western US States",
subtitle = "These are the states in the Pacific Timezone.")
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/counties_map')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/counties_map')
getwd()
setwd(C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/counties_map)
setwd('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/counties_map')
runApp()
runApp()
load("../output/counties.RData")
runApp()
runApp()
shiny::runApp(appDir)
?runApp
getwd()
runApp()
runApp('C:/Users/80921/OneDrive/桌面/1')
runApp('C:/Users/80921/OneDrive/桌面/1')
runApp('C:/Users/80921/OneDrive/桌面/1')
runApp()
runApp()
runApp()
runApp()
runApp(getwd())
dir()
dir
dir(getwd())
?dir
list.dirs(getwd())
list.files(R.home())
R.home()
getwd()
..getwd()
../getwd()
'../getwd()'
paste0('../',getwd())
list.dirs('..')
list.dirs()
list.dirs('C:/Users/80921/OneDrive')
list.dirs('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/map1')
library(shinyapp)
library(shiny)
library(shinydashboard)
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/map1')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/map1')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/map1')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/map1')
