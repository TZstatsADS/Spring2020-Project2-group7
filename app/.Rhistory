scaled.data<-scale(data, center=TRUE, scale=FALSE)
pca <- svd(scaled.data)
par(mfrow=c(1,1), mai=c(0.6, 0.6, 0.6, 0.6))
plot(pca$d[1]* pca$u[,1], pca$d[2]* pca$u[, 2],pch=16, xlab="First Principle Component", ylab="Second Principle Component" )
scale(data, center=TRUE, scale=FALSE)
data
pac$d
pca$d
plot(pca$d[1]*pca$u[1:n.3, 1], pca$d[2]*pca$u[1:n.3, 2], pch="3", col="red", cex=0.8,xlim=c(-10, 10), ylim=c(-10, 10), xlab="First Principle Component", ylab="Second Principle Component")
points(pca$d[1]*pca$u[(n.3+1):(n.3+n.5), 1], pca$d[2]* pca$u[(n.3+1):(n.3+n.5), 2], cex=0.8,pch="5", col="blue")
plot(seq(from=1,to=256, by=1), (pca$d)^2/sum((pca$d)^2), xlab="Priciple componnets", ylab="Proportion of variance explained", pch=16)
km.out<- kmeans(data, 2, nstart=50)
km.out<- kmeans(data, 2, nstart=50)
### Visualize the centroids of each cluster ###
digit_centers<-km.out$centers
par(mfrow=c(1,2), mai=c(0.1,0.1,0.1,0.1))
for(i in 1:2) {
output.image(digit_centers[i,])
}
km.out
km.out$centers
plot(pca$d[1]*pca$u[, 1], pca$d[2]*pca$u[, 2],
col=km.out$cluster,
cex=0.8,
xlim=c(-10, 10),
ylim=c(-10, 10),
xlab="First Principle Component", ylab="Second Principle Component",
main="K-means Assignments"
)
km.out$cluster
knitr::opts_chunk$set(echo = TRUE)
train.3 = read.txt("train_3.txt")
??read.txt
library(tidyverse)
train.3 = read.txt("train_3.txt")
library(tidyverse)
train.3 = read.table("train_3.txt")
library(tidyverse)
train.3 = read.table("train_3.txt")
train.5 = read.table("train_5.txt")
train.8 = read.table("train_8.txt")
text = read.table("zip_test")
library(tidyverse)
train.3 = read.table("train_3.txt")
train.5 = read.table("train_5.txt")
train.8 = read.table("train_8.txt")
text = read.table("zip_test.txt")
train.3
head(train.3)
?read.txt
?read.table
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = ",")
clc
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = ",")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = ",")
head(train.3)
head(train.5)
head(train.6)
head(train.8)
head(text)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
head(text)
head(train.3)
library(sampling)
n=round(2/3*nrow(miete)/5)
n
sub_train=strata(miete,stratanames="nmkat",size=rep(n,5),method="srswor")
head(sub_train)
#剔除1、3、12 属性
data_train=getdata(miete[,c(-1,-3,-12)],sub_train$ID_unit)
data_test=getdata(miete[,c(-1,-3,-12)],-sub_train$ID_unit)
library(kknn)
data("miete")
head(miete)
dim(miete)
summary(miete)
library(sampling)
n=round(2/3*nrow(miete)/5)
n
sub_train=strata(miete,stratanames="nmkat",size=rep(n,5),method="srswor")
head(sub_train)
#剔除1、3、12 属性
data_train=getdata(miete[,c(-1,-3,-12)],sub_train$ID_unit)
data_test=getdata(miete[,c(-1,-3,-12)],-sub_train$ID_unit)
dim(data_test);dim(data_train)
head(data.train)
head(data_train)
head(data_test)
library(MASS)
ff1=lda(nmkat~.,data_train)
ff1
nrow(ttrain.3)
dim(train.3)
nrow(train.3)
nrow(train.5)
nrow(train.8)
nrow(text)
dim(text)
head(text)
text[,1]
train.data = rbind(train.3, train.5, train.8)
train.data
dim(train.data)
text %>% filter(V1 %in% c(3,5,8))
text = text %>% filter(V1 %in% c(3,5,8))
text[,1]
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
train.data = rbind(train.3, train.5, train.8)
train.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
text = text %>% filter(V1 %in% c(3,5,8))
text.data = text[,2:ncol(text)]
text.label = text[,1]
text.label
train.label
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
train.data = rbind(train.3, train.5, train.8)
train.label = c(rep(3, nrow(train.3)),
rep(5, nrow(train.5)),
rep(8, nrow(train.8)))
text = text %>% filter(V1 %in% c(3,5,8))
text.data = text[,2:ncol(text)]
text.label = text[,1]
text.label = text[,1] %>% as.character()
text.label
text
text.data
'V'+ 1:10
paste0('V',1:10)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
train.data = rbind(train.3, train.5, train.8)
train.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
text = text %>% filter(V1 %in% c(3,5,8))
text.data = text[,2:ncol(text)]
colnames(text.data) = paste0('V', 1:256)
text.label = text[,1] %>% as.character()
text.data
ff1=lda(train.label~train.data)
train.data
cbind(train.label, train.data)
cbind(label = train.label, train.data)
cbind(label = train.label, train.data)->x
lda(label~.,x)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
training.data = rbind(train.3, train.5, train.8)
training.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
text = text %>% filter(V1 %in% c(3,5,8))
colnames(text) = c(label, paste0('V', 1:256))
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
training.data = rbind(train.3, train.5, train.8)
training.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
text = text %>% filter(V1 %in% c(3,5,8))
colnames(text) = c('label, paste0('V', 1:256))
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
text = read.table("zip_test.txt", sep = "")
training.data = rbind(train.3, train.5, train.8)
training.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
text = text %>% filter(V1 %in% c(3,5,8))
colnames(text) = c('label', paste0('V', 1:256))
training = cbind(label = training.label, training.data)
text
training
sample(1:100)
sample(1:500)
sample(1:10)
sample(1:12)
training = training[sample(1:nrow(training)),]
training
ff1 = lda(label ~ ., training)
ff1
ff1 = lda(label ~ ., training)
ff2 = predict(ff1, test)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
test = read.table("zip_test.txt", sep = "")
training.data = rbind(train.3, train.5, train.8)
training.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
test = test %>% filter(V1 %in% c(3,5,8))
colnames(text) = c('label', paste0('V', 1:256))
training = cbind(label = training.label, training.data)
training = training[sample(1:nrow(training)),]
ff1 = lda(label ~ ., training)
ff2 = predict(ff1, test)
library(tidyverse)
train.3 = read.table("train_3.txt", sep = ",")
train.5 = read.table("train_5.txt", sep = ",")
train.8 = read.table("train_8.txt", sep = ",")
test = read.table("zip_test.txt", sep = "")
training.data = rbind(train.3, train.5, train.8)
training.label = c(rep('3', nrow(train.3)),
rep('5', nrow(train.5)),
rep('8', nrow(train.8)))
test = test %>% filter(V1 %in% c(3,5,8))
colnames(test) = c('label', paste0('V', 1:256))
training = cbind(label = training.label, training.data)
training = training[sample(1:nrow(training)),]
ff1 = lda(label ~ ., training)
ff2 = predict(ff1, test)
table(test$label, ff2$class)
error_data=sum(as.numeric(as.numeric(ff2$class)!=as.numeric(test$label)))/nrow(test)
error_data=sum(as.numeric(as.numeric(ff2$class)!=as.numeric(test$label)))/nrow(test)
error_data
(ff2$class)
(test$label)
ff2$class !=test$label
error_data = mean(ff2$class != test$label)
error_data
error_rate = mean(ff2$class != test$label)
error_rate
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
ff1
?lda
psc(train.3)
??pca
?lda
lda(label ~ ., training, grouping = 49)
std_train = scale(training[,2:ncol(training)])
std_train
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
princomp(as.data.frame(std_train),cor=TRUE)
pp1 = princomp(as.data.frame(std_train),cor=TRUE)
pp1$sdev
pp1$center
pp1$loading[1:49]
pp1$loading[,1:49]
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = pca$loadings[,1:49]
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(training[,1],pca$loadings[,1:49])
training.pca
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1],pca$loadings[,1:49])
nrow(training)
nrow(pca$loadings)
ncol(pca$loadings)
pca$scores
nrow(pca$scores)
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1],pca$scores[,1:49])
training.pca
ff1 = lda(label ~ ., training)
ff2 = predict(ff1, test[,2:ncol(test)])
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1],pca$scores[,1:49])
ff1 = lda(label ~ ., training.pca)
training.pca
class(training.pca)
class(training)
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1],pca$scores[,1:49])
ff1 = lda(label ~ ., as.data.frame(training.pca))
ff2 = predict(ff1, std_test)
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1],pca$scores[,1:49])
ff1 = lda(label ~ ., as.data.frame(training.pca))
ff2 = predict(ff1, as.data.frame(std_test))
as.data.frame(training.pca)
as.data.frame(std_test)
training.pca = cbind(label = training[,1], V = pca$scores[,1:49])
training.pca
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1], pca$scores[,1:49])
colnames(training.pca) = c(label, paste0('V', 1:256))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca = princomp(as.data.frame(std_train),cor=TRUE)
training.pca = cbind(label = training[,1], pca$scores[,1:49])
colnames(training.pca) = c('label', paste0('V', 1:256))
ncol(training.pca)
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = princomp(as.data.frame(std_train),cor=TRUE)
pca2 = princomp(as.data.frame(std_test),cor=TRUE)
training.pca = cbind(label = training[,1], pca1$scores[,1:49])
test.pca = cbind(label = test[,1], pca2$scores[,1:49])
ff1 = lda(label ~ ., as.data.frame(training.pca))
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
pca1$sdev
?prcomp
pca1 = prcomp(as.data.frame(std_train),cor=TRUE)
pca1 = prcomp(as.data.frame(std_train))
pca1
pca1$x
class(pca1$rotation)
as.matrix(test[,2:ncol(test)]) * pca1$rotation
as.matrix(test[, 2:ncol(test)])
pca1$rotation
as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
training.pca = cbind(label = training[,1], pca1$scores[,1:49])
training.pca
pca1$x
cbind(label = training[,1], pca1$x[,1:49])
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], pca1$x[,1:49])
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
colnames(test.pca) = paste0()
ff1 = lda(label ~ ., as.data.frame(training.pca))
ff2 = predict(ff1, as.data.frame(test.pca))
test.pca
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], pca1$x[,1:49])
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., as.data.frame(training.pca))
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
ff2$class
ff1
training.pca[,1]
training[,1]
as.data.frame(training.pca)
training.pca
training[,1]
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], pca1$x[,1:49])
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., as.data.frame(training.pca))
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
training.pca
View(ff1)
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:49]))
training.pca
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:49]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:256]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:3]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:5]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:1]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:2]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
std_train = scale(training[,2:ncol(training)])
std_test = scale(test[,2:ncol(test)])
pca1 = prcomp(as.data.frame(std_train))
training.pca = cbind(label = training[,1], as.data.frame(pca1$x[,1:49]))
test.pca = as.matrix(test[,2:ncol(test)]) %*% pca1$rotation
ff1 = lda(label ~ ., training.pca)
ff2 = predict(ff1, as.data.frame(test.pca))
table(test$label, ff2$class)
error_rate = mean(ff2$class != test$label)
print(paste0('The error rate of test data is: ',error_rate))
shiny::runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/app')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/app')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/app')
runApp('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/app')
load("../output/Econ_state_map.RData")
getwd()
setwd('C:/Users/80921/OneDrive/桌面/course/5243 Applied Data Science/Project/Spring2020-Project2-group7/app')
library(shiny)
library(shinydashboard)
library(htmlwidgets)
library(leaflet)
library(maps)
library(tidyverse)
library(RColorBrewer)
library(htmltools)
library(leaflet.extras)
library(magrittr)
load("../output/Econ_state_map.RData")
Econ_data_state
library(tidyverse)
library(RColorBrewer)
library(htmltools)
library(leaflet.extras)
library(magrittr)
mapStates = maps::map("state", fill = TRUE, plot = FALSE)
names <- tibble(Name=str_to_upper(mapStates$names)) %>%
separate(Name, c('Name', 'sub'), ':') %>%
select(Name)
mapStates
tibble(Name=str_to_upper(mapStates$names)) %>%
separate(Name, c('Name', 'sub'), ':') %>%
select(Name)
tibble(Name=str_to_upper(mapStates$names))
tibble(Name=str_to_upper(mapStates$names)) %>%
separate(Name, c('Name', 'sub'), ':')
tibble(Name=str_to_upper(mapStates$names)) %>%
separate(Name, c('Name', 'sub'), ':') %>%
select(Name)
runApp()
